MVC = model view controller --> architecture --> how to structure the code(3 component) 

M = actual code(buissness layer),since model is the one to have actual logic  it should talkt  to  the dao layer 

Viewe = front end code 

Contoller= the entry point of the client reguest(some http request), entry pooint of your api. now whatever your api
is doing is bussness logic and that does not belong to the controller(role of the controller is to delagate the call to some service layer where the actual code is written )


flow of MVC = 

client(postman,browser) -->Request to -->Controller -(called)->Service Layer(M) -->(optionally)DAO layer   
client    <---controller<-(response)-view<-(calls)-Controller<--return to<--Service Layer(M)<--DAO layer


models actualy means what all enteties you have in you code, in our case the real life entity is the Todo class, i have question is model service layer or does it contain entety class ?


flow of Todo-app =

in model package = Todo class we declare all the variable and add getters and setters. in repo package= we have listFactory this is where we store our todos in a arrayList(tillfÃ¤llig storage)
 from here we add @configuartion @Bean to to a dependecy injection to Todoservice. service package = in todo service we add @service annotationit so it creates object which we can create refrence of in 
the controller. controller package =In controller we create object reference of TodoService and here we get request from 
client and it will call the Todoservice layer accordingly based on which enpoint to use. in service layer itt will find the appropriate bussiness logic and return rspone based 
on request to controller which lastly will send that response to client.


